import base64
import random

def cypher(string: str, sens: str, truekey: str) -> str:
    enc = 'utf-8'
    xorkey = bytes(truekey, enc)

    # i=chiffrer, o=dechiffrer
    if sens not in ['o', 'i']:
        exit(8)

    if sens == 'i':
        orig_string_len = f'!longueur={len(string)}!'
        if (len(string) + len(orig_string_len)) % 64 != 0:
            padding_len = 64 - ((len(string) + len(orig_string_len)) % 64)
            padding_chars = ''.join([chr(i) for i in random.sample(list(range(65, 91)) + list(range(97, 123)), padding_len)])
            string = orig_string_len + string + padding_chars

    if sens == 'o':
        string = base64.b64decode(string).decode(enc)

    byte_string = bytes(string, enc)
    xord_data = b''
    i = 0
    for byte in byte_string:
        xord_data += bytes([byte ^ xorkey[i]])
        i += 1
        if i >= len(xorkey):
            i = 0

    if sens == 'i':
        xord_data = base64.b64encode(xord_data).decode(enc)
    else:
        xord_data = xord_data.decode(enc)
        match = re.match(r'^!longueur=([0-9]+)!(.*)', xord_data)
        if match:
            lgr_to_keep = int(match.group(1))
            xord_data = match.group(2)[:lgr_to_keep]
        else:
            print('incorrect format [o] [{}]'.format(xord_data))

    return xord_data
