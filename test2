import requests

# Replace these with your vROps API credentials
VROPS_BASE_URL = "https://your_vrops_instance"
USERNAME = "your_username"
PASSWORD = "your_password"

# Replace this with the ID of the group you want to add the host to
GROUP_ID = "your_group_id"

# Replace this with the ID of the host or cluster you want to add to the group
HOST_OR_CLUSTER_ID = "your_host_or_cluster_id"

def add_host_to_group():
    # Obtain an authentication token
    auth_token = get_auth_token()

    # Prepare the request headers
    headers = {
        "Authorization": f"vRealizeOpsToken {auth_token}",
        "Content-Type": "application/json"
    }

    # Get the existing group definition
    group_url = f"{VROPS_BASE_URL}/suite-api/api/resources/groups/{GROUP_ID}"
    response = requests.get(group_url, headers=headers)

    if response.status_code != 200:
        print(f"Failed to get group definition. Status code: {response.status_code}")
        return

    group_definition = response.json()

    # Add the new member to the group definition
    members = group_definition.get("members", [])
    members.append({"id": HOST_OR_CLUSTER_ID, "type": "Resource"})
    group_definition["members"] = members

    # Update the group with the new member
    update_url = f"{VROPS_BASE_URL}/suite-api/api/resources/groups/{GROUP_ID}"
    update_response = requests.put(update_url, headers=headers, json=group_definition)

    if update_response.status_code == 200:
        print("Host added to the group successfully!")
    else:
        print(f"Failed to add host to group. Status code: {update_response.status_code}")
        print(update_response.text)

def get_auth_token():
    # Authenticate and obtain an API token
    auth_url = f"{VROPS_BASE_URL}/suite-api/api/auth/token/acquire"
    auth_payload = {
        "username": USERNAME,
        "password": PASSWORD
    }

    response = requests.post(auth_url, json=auth_payload)

    if response.status_code == 200:
        # Extract the token from the JSON response
        token = response.json()["token"]
        return token
    else:
        raise Exception("Authentication failed.")

if __name__ == "__main__":
    add_host_to_group()
